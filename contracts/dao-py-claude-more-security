# DAO Smart Contract Analysis and Improvements

## Issues Found:

### 1. Lambda Function Usage
```python
# ISSUE: Lambda functions don't exist in PyTeal
proposal_exists = Lambda("proposal_id", ...)
proposal_active = Lambda("proposal_id", ...)

# SOLUTION: Convert to regular functions or inline logic
```

### 2. Variable Assignment Syntax
```python
# ISSUE: This syntax is not valid in PyTeal
[proposal_key := Concat(Bytes("proposal_"), Arg("proposal_id"))]

# SOLUTION: Use proper Let syntax
Let(proposal_key, Concat(Bytes("proposal_"), Arg("proposal_id")), ...)
```

### 3. Missing Functions
```python
# ISSUE: ExtractUint64, Contains functions don't exist in PyTeal
ExtractUint64(parts, Int(5))
Contains(proposal_data, Bytes("::treasury::"))
```

### 4. Group Transaction Indexing
```python
# ISSUE: Gtxn indexing should be more explicit
Assert(Gtxn[0].type_enum() == TxnType.Payment)

# BETTER: Use proper group transaction validation
```

## Fixed Version:

from pyteal import *

def approval_program():
    # Global state schema
    global_schema = GlobalStateSchema(
        num_uints=32,
        num_byte_slices=64
    )
    
    # Local state schema
    local_schema = LocalStateSchema(
        num_uints=16,
        num_byte_slices=16
    )
    
    # Application creation
    handle_creation = Seq([
        App.globalPut(Bytes("proposal_count"), Int(0)),
        App.globalPut(Bytes("treasury"), Int(0)),
        App.globalPut(Bytes("min_voting_power"), Int(1)),
        App.globalPut(Bytes("default_voting_period"), Int(259200)),  # 3 days default
        Return(Int(1))
    ])
    
    # Check membership
    is_member = App.optedIn(Txn.sender(), App.id())
    
    # Join DAO with payment verification
    join_dao = Seq([
        Assert(Not(is_member)),
        Assert(Global.group_size() >= Int(2)),
        
        # Verify payment transaction
        Assert(Gtxn[0].type_enum() == TxnType.Payment),
        Assert(Gtxn[0].receiver() == Global.current_application_address()),
        
        If(
            Btoi(Txn.application_args[1]) == Int(1),  # Team lead
            Seq([
                Assert(Gtxn[0].amount() == Int(10000000)),  # 10 ALGO
                App.localPut(Txn.sender(), Bytes("voting_power"), Int(10)),
                App.globalPut(
                    Bytes("treasury"), 
                    App.globalGet(Bytes("treasury")) + Gtxn[0].amount()
                )
            ]),
            # Regular member
            App.localPut(Txn.sender(), Bytes("voting_power"), Int(1))
        ),
        
        App.localPut(Txn.sender(), Bytes("join_time"), Global.latest_timestamp()),
        Return(Int(1))
    ])
    
    # Create proposal
    create_proposal = Seq([
        Assert(is_member),
        Assert(Len(Txn.application_args) >= Int(5)),  # Now requires voting period
        Assert(Len(Txn.application_args[1]) > Int(0)),  # Title
        Assert(Len(Txn.application_args[2]) > Int(0)),  # Description
        
        # Validate proposal type
        Assert(Or(
            Txn.application_args[3] == Bytes("treasury"),
            Txn.application_args[3] == Bytes("governance"),
            Txn.application_args[3] == Bytes("membership")
        )),
        
        # Validate voting period (1, 3, or 7 days)
        Assert(Or(
            Btoi(Txn.application_args[4]) == Int(86400),   # 1 day
            Btoi(Txn.application_args[4]) == Int(259200),  # 3 days
            Btoi(Txn.application_args[4]) == Int(604800)   # 7 days
        )),
        
        # Treasury proposal validation
        If(
            Txn.application_args[3] == Bytes("treasury"),
            Seq([
                Assert(Len(Txn.application_args) >= Int(6)),
                Assert(Btoi(Txn.application_args[5]) > Int(0)),
                Assert(Btoi(Txn.application_args[5]) <= App.globalGet(Bytes("treasury")))
            ])
        ),
        
        # Increment and store proposal
        App.globalPut(
            Bytes("proposal_count"),
            App.globalGet(Bytes("proposal_count")) + Int(1)
        ),
        
        Let(
            proposal_id, App.globalGet(Bytes("proposal_count")),
            Seq([
                # Store proposal data
                App.globalPut(
                    Concat(Bytes("proposal_"), Itob(proposal_id)),
                    Txn.application_args[1]  # Title
                ),
                App.globalPut(
                    Concat(Bytes("prop_desc_"), Itob(proposal_id)),
                    Txn.application_args[2]  # Description
                ),
                App.globalPut(
                    Concat(Bytes("prop_type_"), Itob(proposal_id)),
                    Txn.application_args[3]  # Type
                ),
                App.globalPut(
                    Concat(Bytes("prop_period_"), Itob(proposal_id)),
                    Btoi(Txn.application_args[4])  # Voting period in seconds
                ),
                App.globalPut(
                    Concat(Bytes("prop_created_"), Itob(proposal_id)),
                    Global.latest_timestamp()  # Creation timestamp
                ),
                App.globalPut(
                    Concat(Bytes("prop_deadline_"), Itob(proposal_id)),
                    Global.latest_timestamp() + Btoi(Txn.application_args[4])  # Deadline
                ),
                
                # Store treasury amount if applicable
                If(
                    Txn.application_args[3] == Bytes("treasury"),
                    App.globalPut(
                        Concat(Bytes("prop_amount_"), Itob(proposal_id)),
                        Btoi(Txn.application_args[5])
                    )
                ),
                
                # Initialize vote counters
                App.globalPut(
                    Concat(Bytes("votes_yes_"), Itob(proposal_id)),
                    Int(0)
                ),
                App.globalPut(
                    Concat(Bytes("votes_no_"), Itob(proposal_id)),
                    Int(0)
                ),
                App.globalPut(
                    Concat(Bytes("votes_abstain_"), Itob(proposal_id)),
                    Int(0)
                )
            ])
        ),
        
        Return(Int(1))
    ])
    
    # Vote on proposal
    vote = Seq([
        Assert(is_member),
        Assert(Len(Txn.application_args) >= Int(3)),
        
        Let(
            proposal_id, Btoi(Txn.application_args[1]),
            Seq([
                # Validate proposal exists
                Assert(proposal_id > Int(0)),
                Assert(proposal_id <= App.globalGet(Bytes("proposal_count"))),
                
                # Check deadline
                Assert(
                    Global.latest_timestamp() <= 
                    App.globalGet(Concat(Bytes("prop_deadline_"), Itob(proposal_id)))
                ),
                
                # Validate vote option
                Assert(Or(
                    Txn.application_args[2] == Bytes("yes"),
                    Txn.application_args[2] == Bytes("no"),
                    Txn.application_args[2] == Bytes("abstain")
                )),
                
                # Check if already voted
                Assert(
                    App.globalGet(
                        Concat(
                            Bytes("voted_"),
                            Itob(proposal_id),
                            Bytes("_"),
                            Txn.sender()
                        )
                    ) == Int(0)
                ),
                
                # Record vote
                App.globalPut(
                    Concat(
                        Bytes("votes_"),
                        Txn.application_args[2],
                        Bytes("_"),
                        Itob(proposal_id)
                    ),
                    App.globalGet(
                        Concat(
                            Bytes("votes_"),
                            Txn.application_args[2],
                            Bytes("_"),
                            Itob(proposal_id)
                        )
                    ) + App.localGet(Txn.sender(), Bytes("voting_power"))
                ),
                
                # Mark as voted
                App.globalPut(
                    Concat(
                        Bytes("voted_"),
                        Itob(proposal_id),
                        Bytes("_"),
                        Txn.sender()
                    ),
                    Int(1)
                )
            ])
        ),
        
        Return(Int(1))
    ])
    
    # Execute proposal
    execute = Seq([
        Assert(is_member),
        Assert(Len(Txn.application_args) >= Int(2)),
        
        Let(
            proposal_id, Btoi(Txn.application_args[1]),
            Let(
                [
                    yes_votes, App.globalGet(Concat(Bytes("votes_yes_"), Itob(proposal_id))),
                    no_votes, App.globalGet(Concat(Bytes("votes_no_"), Itob(proposal_id))),
                    deadline, App.globalGet(Concat(Bytes("prop_deadline_"), Itob(proposal_id)))
                ],
                Seq([
                    # Validate proposal
                    Assert(proposal_id > Int(0)),
                    Assert(proposal_id <= App.globalGet(Bytes("proposal_count"))),
                    
                    # Check results
                    Assert(yes_votes > no_votes),
                    Assert(yes_votes > Int(0)),
                    Assert(Global.latest_timestamp() > deadline),
                    
                    # Check not already executed
                    Assert(
                        App.globalGet(Concat(Bytes("executed_"), Itob(proposal_id))) == Int(0)
                    ),
                    
                    # Mark as executed
                    App.globalPut(
                        Concat(Bytes("executed_"), Itob(proposal_id)),
                        Int(1)
                    )
                ])
            )
        ),
        
        Return(Int(1))
    ])
    
    # Main program logic
    program = Cond(
        [Txn.application_id() == Int(0), handle_creation],
        [Txn.on_completion() == OnComplete.OptIn, Return(Int(1))],
        [Txn.on_completion() == OnComplete.CloseOut, Return(Int(1))],
        [Txn.on_completion() == OnComplete.UpdateApplication, Return(Int(0))],
        [Txn.on_completion() == OnComplete.DeleteApplication, Return(Int(0))],
        [Txn.application_args[0] == Bytes("join"), join_dao],
        [Txn.application_args[0] == Bytes("create_proposal"), create_proposal],
        [Txn.application_args[0] == Bytes("vote"), vote],
        [Txn.application_args[0] == Bytes("execute"), execute]
    )
    
    return program

def clear_state_program():
    return Return(Int(1))

# Key Improvements Made:
# 1. Removed invalid Lambda functions
# 2. Fixed Let syntax for variable assignments
# 3. Simplified data storage to avoid complex string parsing
# 4. Added proper proposal ID validation
# 5. Improved vote counting logic
# 6. Added execution state tracking
# 7. Better error handling and assertions
# 8. CONFIGURABLE VOTING PERIODS: 1, 3, or 7 days

# Usage Notes:
# - Team leads pay 10 ALGO to join (voting power: 10)
# - Regular members join for free (voting power: 1)
# - Proposals can have 1, 3, or 7-day voting periods
# - Simple majority voting (yes > no)
# - Treasury proposals validate available funds

# FRONTEND INTEGRATION GUIDE:

## Updated Application Args for create_proposal:
# args[0] = "create_proposal"
# args[1] = title (string)
# args[2] = description (string)  
# args[3] = type ("treasury", "governance", "membership")
# args[4] = voting_period_seconds (86400=1day, 259200=3days, 604800=7days)
# args[5] = amount (only for treasury proposals)

## Frontend Constants:
VOTING_PERIODS = {
    "1_day": 86400,
    "3_days": 259200, 
    "7_days": 604800
}

## UI Components Needed:

### 1. Voting Period Selector (for proposal creation):
```html
<select name="votingPeriod" required>
    <option value="86400">1 Day</option>
    <option value="259200" selected>3 Days (Default)</option>
    <option value="604800">7 Days</option>
</select>
```

### 2. JavaScript Helper Functions:
```javascript
function getVotingPeriodText(seconds) {
    switch(seconds) {
        case 86400: return "1 Day";
        case 259200: return "3 Days";
        case 604800: return "7 Days";
        default: return "Unknown";
    }
}

function formatTimeRemaining(deadlineTimestamp) {
    const now = Math.floor(Date.now() / 1000);
    const remaining = deadlineTimestamp - now;
    
    if (remaining <= 0) return "Voting Ended";
    
    const days = Math.floor(remaining / 86400);
    const hours = Math.floor((remaining % 86400) / 3600);
    const minutes = Math.floor((remaining % 3600) / 60);
    
    if (days > 0) return `${days}d ${hours}h remaining`;
    if (hours > 0) return `${hours}h ${minutes}m remaining`;
    return `${minutes}m remaining`;
}
```

### 3. Global State Keys to Read:
- `prop_period_{proposal_id}` - voting period in seconds
- `prop_created_{proposal_id}` - creation timestamp  
- `prop_deadline_{proposal_id}` - voting deadline timestamp
- `prop_amount_{proposal_id}` - treasury amount (if treasury proposal)

### 4. Updated Proposal Creation Function:
```javascript
async function createProposal(title, description, type, votingPeriod, amount = null) {
    const args = [
        "create_proposal",
        title,
        description, 
        type,
        votingPeriod.toString()
    ];
    
    if (type === "treasury" && amount) {
        args.push(amount.toString());
    }
    
    // Submit transaction with args
}
```
